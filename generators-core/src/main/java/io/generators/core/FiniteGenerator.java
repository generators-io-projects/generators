package io.generators.core;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generator that should generate finite number of values (should as it depends on the condition)
 *
 * @param <T> type of generated value
 * @author Tomas Klubal
 * @since 2.0
 */
public interface FiniteGenerator<T> extends Generator<T> {

    /**
     * Executes action for every value generated by this generator
     *
     * @param action to be executed
     */
    default void foreach(Consumer<T> action) {
        toIterable().forEach(action::consume);
    }

    /**
     * Creates list out of the generated elements.
     *
     * @return list of generated values
     */
    default List<T> toList() {
        return ImmutableList.copyOf(toIterable());
    }

    /**
     * Create set out of the generated elements
     *
     * @return set of generated values
     */
    default Set<T> toSet() {
        return ImmutableSet.copyOf(toIterable());
    }
}
