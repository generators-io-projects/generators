package io.generators.core;

import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;

import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Provides fluent interface for creating generators
 */
public class FluentGenerator<T> implements Generator<T> {

    private final Generator<T> delegate;

    private FluentGenerator(Generator<T> delegate) {
        this.delegate = checkNotNull(delegate, "delegate can't be null");
    }

    /**
     * Creates FLuentGenerator delegating generation to {@code delegate}
     *
     * @param generator generator to delegate generation to
     * @param <T>       type of the generators
     * @return FluentGenerator
     * @throws java.lang.NullPointerException when {@code delegate} is null
     */
    public static <T> FluentGenerator<T> from(Generator<T> generator) {
        return new FluentGenerator<>(generator);
    }

    /**
     * Wraps the delegate generator in {@link io.generators.core.UniqueGenerator}
     *
     * @return FluentGenerator generating only unique values
     */
    public FluentGenerator<T> unique() {
        return from(new UniqueGenerator<>(delegate));
    }

    /**
     * Wraps generated values in a specified type.
     *
     * @param type type to wrap generated values with
     * @param <K>  the type
     * @return FluentGenerator generating <K>
     * @see io.generators.core.TypeGenerator
     */
    public <K> FluentGenerator<K> ofType(Class<K> type) {
        return from(Generators.ofType(type, delegate));
    }

    /**
     * Creates Iterable over <T> which values are generated by this FluentGenerator
     *
     * @see io.generators.core.GeneratorIterable
     * @param size size of the iterable
     * @return Iterable over <T> which values are generated
     */
    public Iterable<T> toIterable(int size) {
        return new GeneratorIterable<>(size, delegate);
    }

    /**
     * Returns generator that transforms generated values from <T> to <G> using provided {@code function}
     *
     * @see io.generators.core.TransformingGenerator
     * @param function used for the transformation
     * @param <G> result of the transformation
     * @return FluentGenerator doing transformation
     */
    public <G> FluentGenerator<G> transform(Function<T, G> function) {
        return from(new TransformingGenerator<>(delegate, function));
    }

    /**
     * Returns FluentGenerator that filters values using provided {@code predicate}
     *
     * @see io.generators.core.FilteringGenerator
     * @param predicate to use for filtering
     * @return Filtering FluentGenerator
     */
    public FluentGenerator<T> filter(Predicate<T> predicate) {
        return from(new FilteringGenerator<>(delegate, predicate));
    }

    /**
     * Returns FluentGenerator that published generated values to provided {@code first} and {@code other} consumers
     *
     * @see io.generators.core.BroadcastingGenerator
     * @param first consumer
     * @param others consumers
     * @return Broadcasting FluentGenerator
     */
    @SafeVarargs
    public final Generator<T> publishTo(final Consumer<T> first, Consumer<T>... others) {
        final ImmutableList<Consumer<T>> consumers = ImmutableList.<Consumer<T>>builder()
                .add(first)
                .add(others)
                .build();
        return publishTo(consumers);

    }

    /**
     * Returns FluentGenerator that published generated values to provided {@code consumers}
     *
     * @see io.generators.core.BroadcastingGenerator
     * @param consumers to publish/broadcast to
     * @return Broadcasting FluentGenerator
     */
    public Generator<T> publishTo(final List<Consumer<T>> consumers) {
        return from(new BroadcastingGenerator<T>(delegate, consumers));
    }

    @Override
    public T next() {
        return delegate.next();
    }

}
