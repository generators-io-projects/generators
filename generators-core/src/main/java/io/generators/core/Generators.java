package io.generators.core;

import com.google.common.collect.FluentIterable;

import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import static com.google.common.base.Preconditions.checkArgument;
import static io.generators.core.MoreFunctions.*;
import static java.lang.Math.pow;

/**
 * Utility class listing all generators for convenience
 *
 * @author Tomas Klubal
 */
public final class Generators {
    private static final Random random = ThreadLocalRandom.current();
    private static final PositiveLongRandom longRandom = new PositiveLongRandom();

    public static final Generator<Integer> positiveInts = positiveInts(0, Integer.MAX_VALUE);
    public static final Generator<Long> positiveLongs = positiveLongs(0,Long.MAX_VALUE);
    public static final Generator<String> alphabetic10 = new RandomAlphabeticStringGenerator(10);

    private Generators() {
    }

    public static Generator<Integer> positiveInts(int from, int to) {
        checkArgument(from >= 0, "from must be >= 0");
        checkArgument(from < to, "from must be < to");
        return () -> from + random.nextInt(to - from);
    }

    public static Generator<Long> positiveLongs(long from, long to) {
        checkArgument(from >= 0, "from must be >= 0");
        checkArgument(from < to, "from must be < to");
        return () -> from + longRandom.nextLong(to - from);
    }

    public static Generator<String> alphabetic(int length) {
        return new RandomAlphabeticStringGenerator(length);
    }

    /**
     * Generates the instance passed into the constructor.Null value is allowed.
     */
    public static <T> Generator<T> ofInstance(T instance) {
        return () -> instance;
    }

    public static <T, V> Generator<T> ofType(Class<T> type, Generator<V> valueGenerator) {
        return new TypeGenerator<>(type, valueGenerator);
    }

    public static <T> Generator<T> biased(int percentageBiasTowardsFirst, Generator<T> firstGenerator, Generator<T> secondGenerator) {
        return new BiasedGenerator<>(percentageBiasTowardsFirst, firstGenerator, secondGenerator);
    }

    public static <T> List<T> listFrom(int limit, Generator<T> generator) {
        return FluentIterable.from(generator.take(limit)).toList();
    }

    public static <T extends Enum<T>> Generator<T> randomEnum(Class<T> enumClass) {
        return new RandomEnumGenerator<>(enumClass);
    }

    /**
     * Creates Generator that appends Luhn check digit (modulus 10) to the number generated by {@code partialNumberGenerator}
     *
     * @param partialAccountNumberGenerator generator of the main part of the card number
     * @return generator that returns card/account numbers with calculated Luhn check Digit
     */
    public static Generator<Long> cardNumber(Generator<Long> partialAccountNumberGenerator) {
        return partialAccountNumberGenerator.map(appendLuhnCheckDigit());
    }

    public static Generator<Integer> nDigitPositiveInteger(int digits) {
        checkArgument(digits > 0 && digits < 11, "Number of digits must be between 1  and 10");
        int from = (int) pow(10, digits - 1);
        int to = (int) pow(10, digits);
        return positiveInts(from, to);
    }

    public static <F, T> Generator<T> transform(Generator<F> delegate, java.util.function.Function<F, T> transformation) {
        return delegate.map(transformation);
    }

    public static Generator<String> upperCase(Generator<String> delegate, Locale locale) {
        return delegate.map(toUpperCase(locale));
    }

    public static Generator<String> upperCase(Generator<String> delegate) {
        return delegate.map(toUpperCase());
    }

    public static Generator<String> lowerCase(Generator<String> delegate) {
        return delegate.map(toLowerCase());
    }

    public static Generator<String> lowerCase(Generator<String> delegate, Locale locale) {
        return delegate.map(toLowerCase(locale));
    }
}
