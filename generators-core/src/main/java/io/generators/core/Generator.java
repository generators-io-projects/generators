package io.generators.core;

import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;

/**
 * Generates instance of &lt;T&gt;
 *
 * @author Tomas Klubal
 * @author David Bliss
 */
public interface Generator<T> {

    /**
     * Returns generated &lt;T&gt;
     *
     * @return generated <T>
     */
    T next();

    /**
     * Applies function {@code f} to all generated values.
     * @param f function to be applied
     * @param <U> functions result type
     * @return  a new generator of type {@code U} resulting from applying the given function f to each generated  value
     */
    default <U> Generator<U> map(Function<T, U> f) {
        return () -> f.apply(next());
    }


    /**
     * Selects all values generated by this generator which satisfy a predicate.
     * @param p the predicate used to test elements.
     * @return a new generator generating values that satisfy the given predicate p.
     */
    default Generator<T> filter(Predicate<T> p) {
        return () -> {
            T next;
            do {
                next = next();
            } while (!p.test(next));
            return next;
        };
    }


    /**
     * Applies function {@code f} to all generated values.
     * @param f function to be applied
     * @param <U> functions result type
     * @return  a new generator of type {@code U} resulting from applying the given function f to each generated  value
     */
    default <U> Generator<U> flatMap(Function<T, Generator<U>> f) {
        return () -> f.apply(next()).next();
    }


    /**
     * Returns stream consisting of elements generated by this generator
     * @return stream of elements of type {@code T}
     */
    default Stream<T> stream() {
        return Stream.generate(this::next);
    }


    /**
     * Converts Stream of T to Generator of T. Returned generator throws {@link java.util.NoSuchElementException} if there are no elements left in the stream and {@link Generator#next} is called
     * @param stream of elements to be used for generation
     * @param <T> type of the Stream and Generator values
     * @return Generator returning elements from the stream
     */
    static <T> Generator<T> from(Stream<T> stream) {
        return stream.iterator()::next;
    }
}


